WebMvcConfigurer
简介：
WebMvcConfigurer配置类其实是Spring内部的一种配置方式，采用JavaBean的形式来代替传统的xml配置文件形式进行针对框架个性化
定制，可以自定义一些Handler, Interceptor, ViewResolver, MessageConverter。基于java-based方式的spring mvc配置，需要创建
一个配置类并实现WebMvcConfigurer接口。

备注： spring boot 1.5版本靠重写WebMvcConfigurerAdapter的方法来添加自定义拦截器，消息转换器等。spring boot 2.0之后被弃用。
       官方推荐：1、实现WebMvcConfigurer接口（推荐）
                 2、继承WebMvcConfigurationSupport类

常用方法：
拦截器配置： void addInterceptors(InterceptorRegistry var1);
视图跳转控制器： void addViewControllers(ViewControllerRegistry registry);
静态资源处理： void addResourceHandlers(ResourceHandlerRegistry registry);
默认静态资源处理器： void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer);
配置视图解析器： void configureViewResolvers(ViewResolverRegistry registry);
配置内容裁决的一些选项： void configureContentNegotiation(ContentNegotiationConfigurer configurer);
解决跨域问题： public void addCorsMappings(CorsRegistry registry);

1、addInterceptors：拦截器
拦截器主要用途：进行用户登录状态的拦截，日志的拦截等。
addInterceptor：需要一个实现HandlerInterceptor接口的拦截器实例
addPathPatterns：用于设置拦截器的过滤路径规则；addPathPatterns("/**")对所以请求都拦截
excludePathPatterns：用于设置不需要拦截的过滤规则
使用示例：
            @Override
            public void addInterceptors(InterceptorRegistry registry) {
                registry
                        .addInterceptor(new TestInterceptor())
                        .addPathPatterns("/**")
                        .excludePathPatterns("/test/login", "/aaa/login");
            }


2、addViewControllers：页面跳转
以前写SpringMvc如果需要访问一个页面，必须要写Controller类，再写方法跳转到页面，其实重写WebMvcConfigurer中的
addViewControllers方法也可以达到同样的效果。
使用示例：
            @Override
            public void addViewControllers(ViewControllerRegistry registry) {
                registry
                        .addViewController("/toLogin")
                        .setViewName("login");
            }
备注：重写addViewControllers方法，并不会覆盖WebMvcAutoConfiguration（SpringBoot自动配置）中的addViewControllers（在此
      方法中，SpringBoot将"/"映射至index.html），这也就意味着自己的配置和SpringBoot的自动配置同时有效。


3、addResourceHandlers：静态资源
如果想自定义静态资源映射目录，只需重写addResourceHandlers方法即可。
addResourceHandler：指对外暴露的访问路径
addResourceLocations：指的是内部文件放置的目录
注意：如果继承WebMvcConfigurationSupport类实现配置时必须重写addResourceHandlers方法。
使用示例：
            @Override
            public void addResourceHandlers(ResourceHandlerRegistry registry) {
                registry
                        .addResourceHandler("/my/**")
                        .addResourceLocations("classpath:/my/");
            }


4、configureDefaultServletHandling：默认静态资源处理器
使用示例：
            @Override
            public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
                configurer.enable();
                configurer.enable("defaultServletName");
            }
说明：此时会注册一个默认的Handler：defaultServletHttpRequestHandler，这个Handler也是用来处理静态文件的，它会尝试映射/。
      当DispatcherServlet映射/时，（/ 和/ 是有区别的），并且没有找到合适的Handler来处理请求时，就会交给
      DefaultServletHttpRequestHandler 来处理。注意：这里的静态资源是放置在web根目录下，而非 WEB-INF 下。
      简单举个例子：
      在webroot目录下有一个图片：1.png 我们知道Servlet规范中web根目录（webroot）下的文件可以直接访问的，但是由于
      DispatcherServlet 配置了映射路径是：/ ，它几乎把所有的请求都拦截了，从而导致1.png 访问不到，这时注册一个
      DefaultServletHttpRequestHandler 就可以解决这个问题。


5、configureViewResolvers：视图解析器
这个方法是用来配置视图解析器的，该方法的参数ViewResolverRegistry是一个注册器，用来注册你想自定义的视图解析器等。
使用示例：
            /**
             * 配置请求视图映射
             */
            @Bean
            public InternalResourceViewResolver resourceViewResolver() {
                InternalResourceViewResolver internalResourceViewResolver = new InternalResourceViewResolver();
                //请求视图文件的前缀地址
                internalResourceViewResolver.setPrefix("/WEB-INF/jsp/");
                //请求视图文件的后缀
                internalResourceViewResolver.setSuffix(".jsp");
                return internalResourceViewResolver;
            }

            /**
             * 视图配置
             */
            @Override
            public void configureViewResolvers(ViewResolverRegistry registry) {
                registry.viewResolver(resourceViewResolver());
                /*registry.jsp("/WEB-INF/jsp/",".jsp");*/
            }


6、configureContentNegotiation：配置内容裁决的一些参数
使用示例：
     public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {
           /* 是否通过请求Url的扩展名来决定media type */
            configurer.favorPathExtension(true)
                     /* 不检查Accept请求头 */
                    .ignoreAcceptHeader(true)
                    .parameterName("mediaType")
                     /* 设置默认的media yype */
                    .defaultContentType(MediaType.TEXT_HTML)
                     /* 请求以.html结尾的会被当成MediaType.TEXT_HTML*/
                    .mediaType("html", MediaType.TEXT_HTML)
                    /* 请求以.json结尾的会被当成MediaType.APPLICATION_JSON*/
                    .mediaType("json", MediaType.APPLICATION_JSON);
     }

7、addCorsMappings：跨域
使用示例：
        @Override
        public void addCorsMappings(CorsRegistry registry) {
            registry.addMapping("/cors/**")
                    .allowedHeaders("*")
                    // 设置允许的方法
                    .allowedMethods("POST","GET")
                    // 设置允许跨域请求的域名
                    .allowedOrigins("*");
        }


8、configureMessageConverters：信息转换器
使用示例：
        /**
        * 消息内容转换配置
         * 配置fastJson返回json转换
         * @param converters
         */
        @Override
        public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
            //调用父类的配置
            super.configureMessageConverters(converters);
            //创建fastJson消息转换器
            FastJsonHttpMessageConverter fastConverter = new FastJsonHttpMessageConverter();
            //创建配置类
            FastJsonConfig fastJsonConfig = new FastJsonConfig();
            //修改配置返回内容的过滤
            fastJsonConfig.setSerializerFeatures(
                    SerializerFeature.DisableCircularReferenceDetect,
                    SerializerFeature.WriteMapNullValue,
                    SerializerFeature.WriteNullStringAsEmpty
            );
            fastConverter.setFastJsonConfig(fastJsonConfig);
            //将fastJson添加到视图消息转换器列表内
            converters.add(fastConverter);
        }